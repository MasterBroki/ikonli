buildscript {
    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/content/bmuschko/maven' }
        maven { url 'http://dl.bintray.com/content/bmuschko/gradle-plugins' }
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'com.bmuschko:gradle-java2html-plugin:2.0'
    }
}

apply plugin: 'org.asciidoctor.convert'
apply plugin: 'com.bmuschko.java2html'

ext.childProjects = [
    ':ikonli-core',
    ':ikonli-javafx',
    ':ikonli-swing',
    ':ikonli-devicons-pack',
    ':ikonli-elusive-pack',
    ':ikonli-fontawesome-pack',
    ':ikonli-fontelico-pack',
    ':ikonli-foundation-pack',
    ':ikonli-ionicons-pack',
    ':ikonli-maki-pack',
    ':ikonli-material-pack',
    ':ikonli-materialdesign-pack',
    ':ikonli-metrizeicons-pack',
    ':ikonli-octicons-pack',
    ':ikonli-openiconic-pack',
    ':ikonli-typicons-pack',
    ':ikonli-weathericons-pack'
]

ext.childProjects.each { evaluationDependsOn it }

dependencies {
    java2html 'de.java2html:java2html:5.0'
}

task copyDocs(type: Copy) {
    destinationDir = "${buildDir}/sources" as File
    project.ext.childProjects.each { projectName ->
        from(project(projectName).sourceSets.main.allSource) {
            include '**/*.java'
            include '**/*.html'
        }
    }
}

task apiDocs(type: Javadoc, dependsOn: copyDocs) {
    source          = copyDocs.destinationDir
    destinationDir  = file("${buildDir}/api")
    title           = "Ikonli ${project.version}"
    classpath       = project.ext.childProjects.collect { projectName ->
                          [project(projectName).sourceSets.main.output,
                           project(projectName).configurations.compile,
                           project(projectName).configurations.compileOnly]
                      }.flatten().sum() as FileCollection

    excludes = ['**/*.html', 'META-INF/**']

    options.use         = true
    options.splitIndex  = true
    options.encoding    = 'UTF-8'
    options.author      = true
    options.version     = true
    options.source      = project.sourceCompatibility
    options.overview    = file('src/javadoc/overview.html')
    options.windowTitle = "Ikonli ${project.version}"
    options.docTitle    = "Ikonli ${project.version}"
    options.footer      = project.javadocFooter
    options.links       = ['http://www.slf4j.org/apidocs/',
                           'http://junit.org/javadoc/latest/',
                           'http://docs.oracle.com/javase/7/docs/api/',
                           'http://jsr-305.googlecode.com/svn/trunk/javadoc/',
                           'http://atinject.googlecode.com/svn/trunk/javadoc/']

    doLast { task ->
        copy {
            into task.destinationDir
            from file('src/javadoc/resources/css/stylesheet.css')
        }
    }
}

task generateJava2html {
    dependsOn apiDocs
    dependsOn "java2htmlGenerateOverview"
    dependsOn java2htmlConvertCode
}

task javadocJar(type: Jar, dependsOn: apiDocs, overwrite: true) {
    archiveName    = "ikonli-${version}-javadoc.jar"
    destinationDir = "${buildDir}/assemble/jars" as File
    from apiDocs.destinationDir
}

task sourceHtmlJar(type: Jar, dependsOn: java2html) {
    archiveName    = "ikonli-${version}-sources-html.jar"
    destinationDir = "${buildDir}/assemble/jars" as File
    from java2htmlConvertCode.destDir
}

task docsJar(dependsOn: [javadocJar, sourceHtmlJar]) { }

java2html {
    conversion {
        srcDirs = files(copyDocs.destinationDir)
        tabs = 4
        style = 'kawa'
        addLineAnchors = true
        showFileName = true
        useShortFileName = true
        overwrite = true
        showDefaultTitle = true
    }

    overview {
        windowTitle    = "Ikonli ${project.version}"
        docTitle       = "Ikonli ${project.version}"
        docDescription = "Ikonli ${project.version}"
        stylesheet     = file('src/javadoc/resources/css/stylesheet.css')
    }
}

class GenerateIconCheatSheetTask extends DefaultTask {
    @Input String packName
    @Input String iconName
    @Input String iconClassName
    @Input Integer shortNameSize
    @Input Boolean dataGlyph

    @TaskAction
    def generate() {
        GroovyClassLoader gcl = new GroovyClassLoader()
        gcl.addClasspath(project.project(':ikonli-core').file('build/classes/main').absolutePath)
        gcl.addClasspath(project.project(":ikonli-${packName}-pack").file('build/classes/main').absolutePath)
        gcl.addClasspath(project.project(":ikonli-${packName}-pack").file('build/resources/main').absolutePath)
        def iconFontClass = gcl.loadClass(iconClassName, true)

        String document = '''
        The following tables show all available icons.

        [columns="3*", options="header"]
        |===
        | Enum | Name | Icon
        '''.stripIndent(8)

        iconFontClass.values().each { font ->
            document += "| ${font} "
            document += "| ${font.description} "
            if (dataGlyph) {
                document += "| pass:[<span class=\"${iconName}\" data-glyph=\"${font.description[shortNameSize..-1]}\" aria-hidden=\"true\"></span>] "
            } else {
                document += "| pass:[<span class=\"${iconName} ${iconName}-${font.description[shortNameSize..-1]}\"></span>] "
            }
            document += '\n'
        }

        document += '|===\n'

        document += '\n\n'
        File f = project.file("${project.buildDir}/tmp/_${packName}_cheat_sheet.adoc")
        f.parentFile.mkdirs()
        f.text = document
    }
}

def createIconGenerationTask(Map args) {
    Map realArgs = [*:args]
    realArgs.get('dataGlyph', false)
    realArgs.get('shortNameSize', 3)
    realArgs.get('iconName', realArgs.packName)

    Task task = project.tasks.create(type: GenerateIconCheatSheetTask, name: "${realArgs.packName}GenerateIconCheatSheet")
    task.packName = realArgs.packName
    task.iconName = realArgs.iconName
    task.iconClassName = realArgs.iconClassName
    task.shortNameSize = realArgs.shortNameSize
    task.dataGlyph = realArgs.dataGlyph
    task.dependsOn(project(':ikonli-core').classes)
    task.dependsOn(project(":ikonli-${realArgs.packName}-pack").classes)
    task
}

asciidoctor {
    dependsOn createIconGenerationTask(packName: 'devicons',       iconClassName: 'org.kordamp.ikonli.devicons.Devicons'),
              createIconGenerationTask(packName: 'elusive',        iconClassName: 'org.kordamp.ikonli.elusive.Elusive',               iconName: 'el-icon', shortNameSize: 4),
              createIconGenerationTask(packName: 'fontawesome',    iconClassName: 'org.kordamp.ikonli.fontawesome.FontAwesome',       iconName: 'fa'),
              createIconGenerationTask(packName: 'fontelico',      iconClassName: 'org.kordamp.ikonli.fontelico.Fontelico',           shortNameSize: 4),
              createIconGenerationTask(packName: 'foundation',     iconClassName: 'org.kordamp.ikonli.foundation.Foundation'),
              createIconGenerationTask(packName: 'ionicons',       iconClassName: 'org.kordamp.ikonli.ionicons.Ionicons',             iconName: 'ion',   shortNameSize: 4),
              createIconGenerationTask(packName: 'maki',           iconClassName: 'org.kordamp.ikonli.maki.Maki',                     shortNameSize: 5),
              createIconGenerationTask(packName: 'material',       iconClassName: 'org.kordamp.ikonli.material.Material',             iconName: 'gmi',     shortNameSize: 4),
              createIconGenerationTask(packName: 'materialdesign', iconClassName: 'org.kordamp.ikonli.materialdesign.MaterialDesign', iconName: 'mdi',     shortNameSize: 4),
              createIconGenerationTask(packName: 'metrizeicons',   iconClassName: 'org.kordamp.ikonli.metrizeicons.MetrizeIcons',     iconName: 'met',     shortNameSize: 4),
              createIconGenerationTask(packName: 'octicons',       iconClassName: 'org.kordamp.ikonli.octicons.Octicons',             iconName: 'octicon', shortNameSize: 4),
              createIconGenerationTask(packName: 'openiconic',     iconClassName: 'org.kordamp.ikonli.openiconic.Openiconic',         iconName: 'oi',      dataGlyph: true),
              createIconGenerationTask(packName: 'typicons',       iconClassName: 'org.kordamp.ikonli.typicons.Typicons',             iconName: 'typcn',   shortNameSize: 4),
              createIconGenerationTask(packName: 'weathericons',   iconClassName: 'org.kordamp.ikonli.weathericons.WeatherIcons',     iconName: 'wi')
    sourceDir = file('src/asciidoc')
    attributes = [
        toc                    : 'left',
        doctype                : 'book',
        icons                  : 'font',
        encoding               : 'utf-8',
        sectlink               : true,
        sectanchors            : true,
        numbered               : true,
        linkattrs              : true,
        imagesdir              : 'images',
        linkcss                : true,
        stylesheet             : 'css/style.css',
        'source-highlighter'   : 'coderay',
        'coderay-linenums-mode': 'table',
        'project-title'        : project.project_description,
        'project-author'       : 'Andres Almiray',
        'project-url'          : project.project_url,
        'project-vcs'          : project.project_scm,
        'project-issue-tracker': project.project_issues,
        'project-group'        : project.group,
        deviconsVersion        : project.deviconsVersion,
        elusiveVersion         : project.elusiveVersion,
        fontawesomeVersion     : project.fontawesomeVersion,
        fontelicoVersion       : project.fontelicoVersion,
        foundationVersion      : project.foundationVersion,
        ioniconsVersion        : project.ioniconsVersion,
        makiVersion            : project.makiVersion,
        materialVersion        : project.materialVersion,
        materialdesignVersion  : project.materialdesignVersion,
        metrizeVersion         : project.metrizeiconsVersion,
        octiconsVersion        : project.octiconsVersion,
        openiconicVersion      : project.openiconicVersion,
        typiconsVersion        : project.typiconsVersion,
        weathericonsVersion    : project.weathericonsVersion
    ]
    /*sources {
        include '*.adoc'
    }*/
    resources {
        from file('src/resources')
        from project(':ikonli-devicons-pack').file("src/main/resources/META-INF/resources/devicons/${deviconsVersion}")
        from project(':ikonli-elusive-pack').file("src/main/resources/META-INF/resources/elusive/${elusiveVersion}")
        from project(':ikonli-fontawesome-pack').file("src/main/resources/META-INF/resources/fontawesome/${fontawesomeVersion}")
        from project(':ikonli-fontelico-pack').file("src/main/resources/META-INF/resources/fontelico/${fontelicoVersion}")
        from project(':ikonli-foundation-pack').file("src/main/resources/META-INF/resources/foundation/${foundationVersion}")
        from project(':ikonli-ionicons-pack').file("src/main/resources/META-INF/resources/ionicons/${ioniconsVersion}")
        from project(':ikonli-maki-pack').file("src/main/resources/META-INF/resources/maki/${makiVersion}")
        from project(':ikonli-material-pack').file("src/main/resources/META-INF/resources/material/${materialVersion}")
        from project(':ikonli-materialdesign-pack').file("src/main/resources/META-INF/resources/materialdesignicons/${materialdesignVersion}")
        from project(':ikonli-metrizeicons-pack').file("src/main/resources/META-INF/resources/metrizeicons/${metrizeiconsVersion}")
        from project(':ikonli-octicons-pack').file("src/main/resources/META-INF/resources/octicons/${octiconsVersion}")
        from project(':ikonli-openiconic-pack').file("src/main/resources/META-INF/resources/openiconic/${openiconicVersion}")
        from project(':ikonli-typicons-pack').file("src/main/resources/META-INF/resources/typicons/${typiconsVersion}")
        from project(':ikonli-weathericons-pack').file("src/main/resources/META-INF/resources/weathericons/${weathericonsVersion}")
    }
}

task guide(type: Copy, dependsOn: [apiDocs, generateJava2html, asciidoctor]) {
    destinationDir = "${buildDir}/guide" as File
    from(apiDocs.destinationDir)       { into 'api' }
    from(java2htmlConvertCode.destDir) { into 'api-src'}
    from("${asciidoctor.outputDir}/html5")
}

task guideZip(type: Zip, dependsOn: guide) {
    baseName = "ikonli-guide"
    from guide.destinationDir
}